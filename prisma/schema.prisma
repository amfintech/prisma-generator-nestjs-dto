datasource db {
  provider = "postgresql"
  url      = "postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public"
}

generator nestjsDto {
  provider                        = "node -r ts-node/register/transpile-only src/cli.ts"
  output                          = "../src/@generated/prisma-generator-nestjs-dto"
  outputToNestJsResourceStructure = "true"
  flatResourceStructure           = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = "Entity"
  fileNamingStyle                 = "camel"
  classValidation                 = "true"
  noDependencies                  = "false"
  outputType                      = "class"
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @Contains('Product')
  /// @description Project's name
  /// @example My first product
  name        String   @db.VarChar(255)
  description String   @db.VarChar(1024)
  /// @maxItems 5
  images      Json[]   @db.Json
  highlighted Boolean  @default(false)

  /// @DtoCreateOptional
  /// @description Number of reviews
  /// @minimum 9
  /// @example 12
  /// @Max(10)
  reviewCount Int      @default(0)
  type        ProductType /// 产品类型
  /// @ArrayNotEmpty
  tags        String[]
  attributes  Json?
  score       Decimal?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  note        String   @default("")
  categoryId  String   @db.Uuid
  companyId   String   @db.Uuid

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  category Category @relation(fields: [categoryId], references: [id])

  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  company Company @relation(fields: [companyId], references: [id])

  /// @DtoEntityHidden
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  /// @DtoEntityHidden
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@map("products")
}

model Category {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  updatedAt DateTime @updatedAt
  Product   Product[]
}

model Company {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// @DtoRelationAsPropertyOnCreate
  /// @IsRequired
  Product Product[]
}

enum ProductType {
  digital
  analogue
}
